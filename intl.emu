<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Decimal
status: proposal
stage: 1
contributors: Jesse Alama
location: https://github.com/tc39/proposal-decimal/
</pre>

<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/tc39/proposal-decimal/" title="Decimal proposal (GitHub)">Decimal proposal</a> in that is suitable for the ECMAScript 2024 Internationalization API (ECMA-402).
  </p>
</emu-clause>

<emu-clause id="numberformat-objects">
  <h1>NumberFormat Objects</h1>
  <emu-clause id="sec-numberformat-abstracts">
    <h1>Abstract Operations for NumberFormat Objects</h1>
    <emu-clause id="sec-tointlmathematicalvalue" type="abstract operation">
      <h1>
        ToIntlMathematicalValue (
          _value_: an ECMAScript language value,
        ): either a normal completion containing an Intl mathematical value or a throw completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          It returns _value_ converted to an <dfn id="intl-mathematical-value">Intl mathematical value</dfn>, which is a mathematical value together with ~positive-infinity~, ~negative-infinity~, ~not-a-number~, and ~negative-zero~.
          This abstract operation is similar to <emu-xref href="#sec-tonumeric"></emu-xref>, but a mathematical value can be returned instead of a Number or BigInt, so that exact decimal values can be represented.
        </dd>
      </dl>
      <emu-alg>
        1. <ins>If _value_ is a Decimal128 object, then</ins>
          1. <ins>If _value_.isNaN is *true*, then return ~not-a-number~.</ins>
          1. <ins>If _value_.isFinite is *true*, then</ins>
            1. <ins>Let _decimalCmpZero_ be the result of calling _value_.cmp(new Decimal128(*"0"*)).</ins>
            1. <ins>If _decimalCmpZero_ is *0* and _value_.isNegative is *true*, then return ~negative-zero~</ins>
            1. <ins>Return <emu-xref href="#dfn-decimal128-mathematical-value">the mathematical value</emu-xref> of _value_.</ins>
          1. <ins>If _value.isNegative_ is *true*, then return ~negative-infinity~.</ins>
          1. <ins>Return ~positive-infinity~.</ins>
        1. Let _primValue_ be ? ToPrimitive(_value_, ~number~).
        1. If Type(_primValue_) is BigInt, return ‚Ñù(_primValue_).
        1. If Type(_primValue_) is String, then
          1. Let _str_ be _primValue_.
        1. Else,
          1. Let _x_ be ? ToNumber(_primValue_).
          1. If _x_ is *-0*<sub>ùîΩ</sub>, return ~negative-zero~.
          1. Let _str_ be Number::toString(_x_, 10).
        1. Let _text_ be StringToCodePoints(_str_).
        1. Let _literal_ be ParseText(_text_, |StringNumericLiteral|).
        1. If _literal_ is a List of errors, return ~not-a-number~.
        1. Let _intlMV_ be the StringIntlMV of _literal_.
        1. If _intlMV_ is a mathematical value, then
          1. Let _rounded_ be RoundMVResult(abs(_intlMV_)).
          1. If _rounded_ is *+‚àû*<sub>ùîΩ</sub> and _intlMV_ &lt; 0, return ~negative-infinity~.
          1. If _rounded_ is *+‚àû*<sub>ùîΩ</sub>, return ~positive-infinity~.
          1. If _rounded_ is *+0*<sub>ùîΩ</sub> and _intlMV_ &lt; 0, return ~negative-zero~.
          1. If _rounded_ is *+0*<sub>ùîΩ</sub>, return 0.
        1. Return _intlMV_.
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>
