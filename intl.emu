<!DOCTYPE html>

<emu-intro id="sec-decimal-intl">
  <h1>Amendments to the ECMAScript¬Æ 2024 Internationalization API Specification</h1>

  <emu-note type="editor">
    <p>
      This section lists amendments which must be made to <a href="https://tc39.es/ecma402/">ECMA-402, the ECMAScript¬Æ 2024 Internationalization API Specification</a>.
      Text to be added is marked <ins>like this</ins>, and text to be deleted is marked <del>like this</del>.
      Blocks of unmodified text between modified sections are marked by [...].
    </p>
  </emu-note>
</emu-intro>

<emu-clause id="numberformat-objects">
  <h1>NumberFormat Objects</h1>
  <emu-clause id="sec-numberformat-abstracts">
    <h1>Abstract Operations for NumberFormat Objects</h1>

    <emu-clause id="sec-tointlmathematicalvalue" type="abstract operation">
      <h1>
        ToIntlMathematicalValue (
          _value_: an ECMAScript language value,
        ): either a normal completion containing an Intl mathematical value or a throw completion
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          It returns _value_ converted to an <dfn id="intl-mathematical-value">Intl mathematical value</dfn>, which is either a mathematical value or one of ~positive-infinity~, ~negative-infinity~, ~not-a-number~, and ~negative-zero~.
          This abstract operation is similar to <emu-xref href="#sec-tonumeric"></emu-xref>, but a mathematical value can be returned instead of a Number or BigInt, so that exact decimal values can be represented.
        </dd>
      </dl>
      <emu-alg>
        1. <ins>If _value_ has a [[Decimal128Data]] internal slot, then</ins>
          1. <ins>Let _d_ be _value_.[[Decimal128Data]].</ins>
          1. <ins>If _d_ is NaN<sub>ùîª</sub>, return ~not-a-number~.</ins>
          1. <ins>If _d_ is *+‚àû*<sub>ùîª</sub>, return ~positive-infinity~.</ins>
          1. <ins>If _d_ is *-‚àû*<sub>ùîª</sub>, return ~negative-infinity~.</ins>
          1. <ins>Let _v_ be _d_[0].</ins>
          1. <ins>If _v_ is *-0*<sub>ùîª</sub>, return ~negative-zero~.</ins>
          1. <ins>Return <emu-xref href="#dfn-decimal128-mathematical-value">the mathematical value</emu-xref> of _d_.</ins>
        1. Let _primValue_ be ? ToPrimitive(_value_, ~number~).
        1. If Type(_primValue_) is BigInt, return ‚Ñù(_primValue_).
        1. If Type(_primValue_) is String, then
          1. Let _str_ be _primValue_.
        1. Else,
          1. Let _x_ be ? ToNumber(_primValue_).
          1. If _x_ is *-0*<sub>ùîΩ</sub>, return ~negative-zero~.
          1. Let _str_ be Number::toString(_x_, 10).
        1. Let _text_ be StringToCodePoints(_str_).
        1. Let _literal_ be ParseText(_text_, |StringNumericLiteral|).
        1. If _literal_ is a List of errors, return ~not-a-number~.
        1. Let _intlMV_ be the StringIntlMV of _literal_.
        1. If _intlMV_ is a mathematical value, then
          1. Let _rounded_ be RoundMVResult(abs(_intlMV_)).
          1. If _rounded_ is *+‚àû*<sub>ùîΩ</sub> and _intlMV_ < 0, return ~negative-infinity~.
          1. If _rounded_ is *+‚àû*<sub>ùîΩ</sub>, return ~positive-infinity~.
          1. If _rounded_ is *+0*<sub>ùîΩ</sub> and _intlMV_ < 0, return ~negative-zero~.
          1. If _rounded_ is *+0*<sub>ùîΩ</sub>, return 0.
        1. Return _intlMV_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-formatnumberstring" type="abstract operation">
      <h1>
        FormatNumericToString (
          _intlObject_: an Object,
          _x_: a mathematical value, ~negative-zero~<ins>, or a Decimal128 value</ins>,
        ): a Record with fields [[RoundedNumber]] (a mathematical value or ~negative-zero~) and [[FormattedString]] (a String)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It rounds _x_ to an Intl mathematical value according to the internal slots of _intlObject_. The [[RoundedNumber]] field contains the rounded result value and the [[FormattedString]] field contains a String value representation of that result formatted according to the internal slots of _intlObject_.</dd>
      </dl>
      <emu-alg>
        1. Assert: _intlObject_ has [[RoundingMode]], [[RoundingType]], [[MinimumSignificantDigits]], [[MaximumSignificantDigits]], [[MinimumIntegerDigits]], [[MinimumFractionDigits]], [[MaximumFractionDigits]], [[RoundingIncrement]], and [[TrailingZeroDisplay]] internal slots.
        1. If _x_ is ~negative-zero~, then
          1. Let _sign_ be ~negative~.
          1. Set _x_ to 0.
        1. <ins>If _x_ is a Decimal128 value, then</ins>
          1. <ins>Let _sign_ be *undefined*.</ins>
          1. <ins>Assert: _x_ is not *NaN*<sub>ùîª</sub>.</ins>
          1. <ins>Assert: _x_ is not *+‚àû*<sub>ùîª</sub>.</ins>
          1. <ins>Assert: _x_ is not *-‚àû*<sub>ùîª</sub>.</ins>
          1. <ins>Let _v_ be _x_[0].</ins>
          1. <ins>If _v_ is *-0*<sub>ùîª</sub>, then</ins>
            1. <ins>Set _sign_ be ~negative~.</ins>
            1. <ins>Set _x_ to 0.</ins>
          1. <ins>Else,</ins>
            1. <ins>if _v_ < 0, set _sign_ to ~negative~.</ins>
            1. <ins>Else, set _sign_ to ~positive~.</ins>
          1. Set _x_ to _v_.
        1. Else,
          1. Assert: _x_ is a mathematical value.
          1. If _x_ < 0, let _sign_ be ~negative~; else let _sign_ be ~positive~.
          1. If _sign_ is ~negative~, then
            1. Set _x_ to -_x_.
        1. Let _unsignedRoundingMode_ be GetUnsignedRoundingMode(_intlObject_.[[RoundingMode]], _sign_).
        1. If _intlObject_.[[RoundingType]] is ~significant-digits~, then
          1. Let _result_ be ToRawPrecision(_x_, _intlObject_.[[MinimumSignificantDigits]], _intlObject_.[[MaximumSignificantDigits]], _unsignedRoundingMode_).
        1. Else if _intlObject_.[[RoundingType]] is ~fraction-digits~, then
          1. Let _result_ be ToRawFixed(_x_, _intlObject_.[[MinimumFractionDigits]], _intlObject_.[[MaximumFractionDigits]], _intlObject_.[[RoundingIncrement]], _unsignedRoundingMode_).
        1. Else,
          1. Let _sResult_ be ToRawPrecision(_x_, _intlObject_.[[MinimumSignificantDigits]], _intlObject_.[[MaximumSignificantDigits]], _unsignedRoundingMode_).
          1. Let _fResult_ be ToRawFixed(_x_, _intlObject_.[[MinimumFractionDigits]], _intlObject_.[[MaximumFractionDigits]], _intlObject_.[[RoundingIncrement]], _unsignedRoundingMode_).
          1. If _intlObject_.[[RoundingType]] is ~more-precision~, then
            1. If _sResult_.[[RoundingMagnitude]] ‚â§ _fResult_.[[RoundingMagnitude]], then
              1. Let _result_ be _sResult_.
            1. Else,
              1. Let _result_ be _fResult_.
          1. Else,
            1. Assert: _intlObject_.[[RoundingType]] is ~less-precision~.
            1. If _sResult_.[[RoundingMagnitude]] ‚â§ _fResult_.[[RoundingMagnitude]], then
              1. Let _result_ be _fResult_.
            1. Else,
              1. Let _result_ be _sResult_.
        1. Set _x_ to _result_.[[RoundedNumber]].
        1. Let _string_ be _result_.[[FormattedString]].
        1. If _intlObject_.[[TrailingZeroDisplay]] is *"stripIfInteger"* and <emu-eqn>_x_ modulo 1 = 0</emu-eqn>, then
          1. Let _i_ be StringIndexOf(_string_, *"."*, 0).
          1. If _i_ ‚â† -1, set _string_ to the substring of _string_ from 0 to _i_.
        1. Let _int_ be _result_.[[IntegerDigitsCount]].
        1. Let _minInteger_ be _intlObject_.[[MinimumIntegerDigits]].
        1. If _int_ < _minInteger_, then
          1. Let _forwardZeros_ be the String consisting of _minInteger_ - _int_ occurrences of the code unit 0x0030 (DIGIT ZERO).
          1. Set _string_ to the string-concatenation of _forwardZeros_ and _string_.
        1. If _sign_ is ~negative~, then
          1. If _x_ is 0, set _x_ to ~negative-zero~. Otherwise, set _x_ to -_x_.
        1. Return the Record { [[RoundedNumber]]: _x_, [[FormattedString]]: _string_ }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-torawprecision" type="abstract operation">
      <h1>
        ToRawPrecision (
          _x_: a non-negative mathematical value<ins> or a finite non-negative Decimal128 value</ins>,
          _minPrecision_: an integer in the inclusive interval from 1 to 21,
          _maxPrecision_: an integer in the inclusive interval from 1 to 21,
          _unsignedRoundingMode_: a specification type from the Unsigned Rounding Mode column of <emu-xref href="#table-intl-unsigned-rounding-modes"></emu-xref>, or *undefined*,
        ): a Record with fields [[FormattedString]] (a String), [[RoundedNumber]] (a mathematical value), [[IntegerDigitsCount]] (an integer), and [[RoundingMagnitude]] (an integer)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          <p><ins>If _x_ is a mathematical value, it</ins> <del>It</del> involves solving the following equation, which returns a valid mathematical value given integer inputs:</p>
          <emu-eqn id="eqn-ToRawPrecisionFn" aoid="ToRawPrecisionFn">
            ToRawPrecisionFn(_n_, _e_, _p_) = _n_ √ó 10<sup>_e_‚Äì_p_+1</sup>
            where 10<sup>_p_‚Äì1</sup> ‚â§ _n_ < 10<sup>_p_</sup>
          </emu-eqn>
        </dd>
      </dl>
      <emu-alg>
        1. <ins>If _x_ is a Decimal128 value, then</ins>
          1. <ins>Let _m_ be Decimal128ToDecimalString(_x_, *false*).</ins>
          1. <ins>Let _e_ be the truncated exponent of _x_.</ins>
          1. <ins>Let _n_ be the scaled significand of _x_.</ins>
        1. <ins>Else,</ins>
          1. <ins>Assert _x_ is a mathematival value.</ins>
          1. Let _p_ be _maxPrecision_.
          1. If _x_ = 0<ins> or _x_ is a zero Decimal128 object</ins>, then
            1. Let _m_ be the String consisting of _p_ occurrences of the code unit 0x0030 (DIGIT ZERO).
            1. Let _e_ be 0.
            1. Let _xFinal_ be 0.
          1. Else,
            1. [declared="n1,e1,r1"] Let _n1_ and _e1_ each be an integer and _r1_ a mathematical value, with <emu-eqn>_r1_ = ToRawPrecisionFn(_n1_, _e1_, _p_)</emu-eqn>, such that <emu-eqn>_r1_ ‚â§ _x_</emu-eqn> and _r1_ is maximized.
            1. [declared="n2,e2,r2"] Let _n2_ and _e2_ each be an integer and _r2_ a mathematical value, with <emu-eqn>_r2_ = ToRawPrecisionFn(_n2_, _e2_, _p_)</emu-eqn>, such that <emu-eqn>_r2_ ‚â• _x_</emu-eqn> and _r2_ is minimized.
            1. Let _r_ be ApplyUnsignedRoundingMode(_x_, _r1_, _r2_, _unsignedRoundingMode_).
            1. If _r_ is _r1_, then
              1. Let _n_ be _n1_.
              1. Let _e_ be _e1_.
              1. Let _xFinal_ be _r1_.
            1. Else,
              1. Let _n_ be _n2_.
              1. Let _e_ be _e2_.
              1. Let _xFinal_ be _r2_.
            1. Let _m_ be the String consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).
        1. If _e_ ‚â• (_p_ - 1), then
          1. Set _m_ to the string-concatenation of _m_ and _e_ - _p_ + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).
          1. Let _int_ be _e_ + 1.
        1. Else if _e_ ‚â• 0, then
          1. Set _m_ to the string-concatenation of the first _e_ + 1 code units of _m_, the code unit 0x002E (FULL STOP), and the remaining _p_ - (_e_ + 1) code units of _m_.
          1. Let _int_ be _e_ + 1.
        1. Else,
          1. Assert: _e_ < 0.
          1. Set _m_ to the string-concatenation of *"0."*, -(_e_ + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and _m_.
          1. Let _int_ be 1.
        1. If _m_ contains the code unit 0x002E (FULL STOP) and _maxPrecision_ > _minPrecision_, then
          1. Let _cut_ be _maxPrecision_ - _minPrecision_.
          1. Repeat, while _cut_ > 0 and the last code unit of _m_ is 0x0030 (DIGIT ZERO),
            1. Remove the last code unit from _m_.
            1. Set _cut_ to _cut_ - 1.
          1. If the last code unit of _m_ is 0x002E (FULL STOP), then
            1. Remove the last code unit from _m_.
        1. Return the Record { [[FormattedString]]: _m_, [[RoundedNumber]]: _xFinal_, [[IntegerDigitsCount]]: _int_, [[RoundingMagnitude]]: _e_‚Äì_p_+1 }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-torawfixed" type="abstract operation">
      <h1>
        ToRawFixed (
          _x_: a non-negative mathematical value<ins> or a finite non-negative Decimal128 value</ins>,
          _minFraction_: an integer in the inclusive interval from 0 to 100,
          _maxFraction_: an integer in the inclusive interval from 0 to 100,
          _roundingIncrement_: an integer,
          _unsignedRoundingMode_: a specification type from the Unsigned Rounding Mode column of <emu-xref href="#table-intl-unsigned-rounding-modes"></emu-xref>, or *undefined*,
        ): a Record with fields [[FormattedString]] (a String), [[RoundedNumber]] (a mathematical value), [[IntegerDigitsCount]] (an integer), and [[RoundingMagnitude]] (an integer)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          <p><del>It</del> involves solving the following equation, which returns a valid mathematical value given integer inputs:</p>
          <emu-eqn id="eqn-ToRawFixedFn" aoid="ToRawFixedFn">
            ToRawFixedFn(_n_, _f_) = _n_ √ó 10<sup>‚Äì_f_</sup>
          </emu-eqn>
        </dd>
      </dl>
      <emu-alg>
        1. <ins>If _x_ is a Decimal128 value, then</ins>
          1. <ins>Let _m_ be Decimal128ToDecimalString(_x_, *false*).</ins>
          1. <ins>Let _f_ be the truncated exponent of _x_.</ins>
          1. <ins>Let _n_ be the scaled significand of _x_.</ins>
        1. Else,
          1. Let _f_ be _maxFraction_.
          1. [declared="n1,r1"] Let _n1_ be an integer and _r1_ a mathematical value, with <emu-eqn>_r1_ = ToRawFixedFn(_n1_, _f_)</emu-eqn>, such that <emu-eqn>_n1_ modulo _roundingIncrement_ = 0</emu-eqn>, <emu-eqn>_r1_ ‚â§ _x_</emu-eqn>, and _r1_ is maximized.
          1. [declared="n2,r2"] Let _n2_ be an integer and _r2_ a mathematical value, with <emu-eqn>_r2_ = ToRawFixedFn(_n2_, _f_)</emu-eqn>, such that <emu-eqn>_n2_ modulo _roundingIncrement_ = 0</emu-eqn>, <emu-eqn>_r2_ ‚â• _x_</emu-eqn>, and _r2_ is minimized.
          1. Let _r_ be ApplyUnsignedRoundingMode(_x_, _r1_, _r2_, _unsignedRoundingMode_).
          1. If _r_ is _r1_, then
            1. Set _n_ to _n1_.
            1. Let _xFinal_ be _r1_.
          1. Else,
            1. Set _n_ to _n2_.
            1. Let _xFinal_ be _r2_.
        1. If _n_ = 0, let _m_ be *"0"*. Otherwise, let _m_ be the String consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).
        1. If _f_ ‚â† 0, then
          1. Let _k_ be the length of _m_.
          1. If _k_ ‚â§ _f_, then
            1. Let _z_ be the String value consisting of _f_ + 1 - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO).
            1. Set _m_ to the string-concatenation of _z_ and _m_.
            1. Set _k_ to _f_ + 1.
          1. Let _a_ be the first _k_ - _f_ code units of _m_, and let _b_ be the remaining _f_ code units of _m_.
          1. Set _m_ to the string-concatenation of _a_, *"."*, and _b_.
          1. Let _int_ be the length of _a_.
        1. Else,
          1. Let _int_ be the length of _m_.
        1. Let _cut_ be _maxFraction_ - _minFraction_.
        1. Repeat, while _cut_ > 0 and the last code unit of _m_ is 0x0030 (DIGIT ZERO),
          1. Remove the last code unit from _m_.
          1. Set _cut_ to _cut_ - 1.
        1. If the last code unit of _m_ is 0x002E (FULL STOP), then
          1. Remove the last code unit from _m_.
        1. Return the Record { [[FormattedString]]: _m_, [[RoundedNumber]]: _xFinal_, [[IntegerDigitsCount]]: _int_, [[RoundingMagnitude]]: ‚Äì_f_ }.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-partitionnumberpattern" type="abstract operation">
      <h1>
        PartitionNumberPattern (
          _numberFormat_: an object initialized as a NumberFormat,
          _x_: an Intl mathematical value,
        ): a List of Records with fields [[Type]] (a String) and [[Value]] (a String)
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It creates the parts representing the mathematical value of _x_ according to the effective locale and the formatting options of _numberFormat_.</dd>
      </dl>

      <emu-alg>
        1. Let _exponent_ be 0.
        1. If _x_ is ~not-a-number~, then
          1. Let _n_ be an implementation- and locale-dependent (ILD) String value indicating the *NaN* value.
        1. Else if _x_ is ~positive-infinity~, then
          1. Let _n_ be an ILD String value indicating positive infinity.
        1. Else if _x_ is ~negative-infinity~, then
          1. Let _n_ be an ILD String value indicating negative infinity.
        1. <ins>Else if _x_ is a Decimal128 value, then</ins>
          1. <ins>Let _v_ be _x_[0].</ins>
          1. <ins>Let _q_ be _x_[1].</ins>
          1. <ins>If _numberFormat_.[[Style]] is *"percent"*, set _x_ to ¬´ _v_ √ó 100, _q_ + 2 ¬ª.</ins>
          1. <ins>Set _exponent_ to the truncated exponent _x_.</ins>
          1. <ins>Set _x_ to ! _v_ √ó 10<sup>-_exponent_</sup>.</ins>
        1. Else,
          1. If _x_ is not ~negative-zero~, then
            1. Assert: _x_ is a mathematical value.
            1. If _numberFormat_.[[Style]] is *"percent"*, set _x_ be 100 √ó _x_.
            1. Set _exponent_ to ComputeExponent(_numberFormat_, _x_).
            1. Set _x_ to _x_ √ó 10<sup>-_exponent_</sup>.
          1. Let _formatNumberResult_ be FormatNumericToString(_numberFormat_, _x_).
          1. Let _n_ be _formatNumberResult_.[[FormattedString]].
          1. Set _x_ to _formatNumberResult_.[[RoundedNumber]].
        1. Let _pattern_ be GetNumberFormatPattern(_numberFormat_, _x_).
        1. Let _result_ be a new empty List.
        1. Let _patternParts_ be PartitionPattern(_pattern_).
        1. For each Record { [[Type]], [[Value]] } _patternPart_ of _patternParts_, do
          1. Let _p_ be _patternPart_.[[Type]].
          1. If _p_ is *"literal"*, then
            1. Append the Record { [[Type]]: *"literal"*, [[Value]]: _patternPart_.[[Value]] } to _result_.
          1. Else if _p_ is equal to *"number"*, then
            1. Let _notationSubParts_ be PartitionNotationSubPattern(_numberFormat_, _x_, _n_, _exponent_).
            1. For each Record { [[Type]], [[Value]] } _subPart_ of _notationSubParts_, do
              1. Append _subPart_ to _result_.
          1. Else if _p_ is equal to *"plusSign"*, then
            1. Let _plusSignSymbol_ be the ILND String representing the plus sign.
            1. Append the Record { [[Type]]: *"plusSign"*, [[Value]]: _plusSignSymbol_ } to _result_.
          1. Else if _p_ is equal to *"minusSign"*, then
            1. Let _minusSignSymbol_ be the ILND String representing the minus sign.
            1. Append the Record { [[Type]]: *"minusSign"*, [[Value]]: _minusSignSymbol_ } to _result_.
          1. Else if _p_ is equal to *"percentSign"* and _numberFormat_.[[Style]] is *"percent"*, then
            1. Let _percentSignSymbol_ be the ILND String representing the percent sign.
            1. Append the Record { [[Type]]: *"percentSign"*, [[Value]]: _percentSignSymbol_ } to _result_.
          1. Else if _p_ is equal to *"unitPrefix"* and _numberFormat_.[[Style]] is *"unit"*, then
            1. Let _unit_ be _numberFormat_.[[Unit]].
            1. Let _unitDisplay_ be _numberFormat_.[[UnitDisplay]].
            1. Let _mu_ be an ILD String value representing _unit_ before _x_ in _unitDisplay_ form, which may depend on _x_ in languages having different plural forms.
            1. Append the Record { [[Type]]: *"unit"*, [[Value]]: _mu_ } to _result_.
          1. Else if _p_ is equal to *"unitSuffix"* and _numberFormat_.[[Style]] is *"unit"*, then
            1. Let _unit_ be _numberFormat_.[[Unit]].
            1. Let _unitDisplay_ be _numberFormat_.[[UnitDisplay]].
            1. Let _mu_ be an ILD String value representing _unit_ after _x_ in _unitDisplay_ form, which may depend on _x_ in languages having different plural forms.
            1. Append the Record { [[Type]]: *"unit"*, [[Value]]: _mu_ } to _result_.
          1. Else if _p_ is equal to *"currencyCode"* and _numberFormat_.[[Style]] is *"currency"*, then
            1. Let _currency_ be _numberFormat_.[[Currency]].
            1. Let _cd_ be _currency_.
            1. Append the Record { [[Type]]: *"currency"*, [[Value]]: _cd_ } to _result_.
          1. Else if _p_ is equal to *"currencyPrefix"* and _numberFormat_.[[Style]] is *"currency"*, then
            1. Let _currency_ be _numberFormat_.[[Currency]].
            1. Let _currencyDisplay_ be _numberFormat_.[[CurrencyDisplay]].
            1. Let _cd_ be an ILD String value representing _currency_ before _x_ in _currencyDisplay_ form, which may depend on _x_ in languages having different plural forms.
            1. Append the Record { [[Type]]: *"currency"*, [[Value]]: _cd_ } to _result_.
          1. Else if _p_ is equal to *"currencySuffix"* and _numberFormat_.[[Style]] is *"currency"*, then
            1. Let _currency_ be _numberFormat_.[[Currency]].
            1. Let _currencyDisplay_ be _numberFormat_.[[CurrencyDisplay]].
            1. Let _cd_ be an ILD String value representing _currency_ after _x_ in _currencyDisplay_ form, which may depend on _x_ in languages having different plural forms. If the implementation does not have such a representation of _currency_, use _currency_ itself.
            1. Append the Record { [[Type]]: *"currency"*, [[Value]]: _cd_ } to _result_.
          1. Else,
            1. Let _unknown_ be an ILND String based on _x_ and _p_.
            1. Append the Record { [[Type]]: *"unknown"*, [[Value]]: _unknown_ } to _result_.
        1. Return _result_.
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>
