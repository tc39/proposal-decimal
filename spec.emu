<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Decimal
status: proposal
stage: 1
contributors: Jesse Alama
location: https://github.com/tc39/proposal-decimal/
</pre>

<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/tc39/proposal-decimal/" title="Decimal proposal (GitHub)">Decimal proposal</a> in ECMAScript.
  </p>
</emu-clause>

<emu-clause id="sec-the-decimal-object">
  <emu-intro>
    <p>Decimal values, as specified here, are intended represent base-10 (decimal) numbers. ECMAScript, and many other languages, default to representing numbers in base-2 (binary). The conversion of a decimal digit string to a Number is usually inexact; the Number representing the initial decimal digit string is only approximately correct.</p>
    <p>Decimal values are IEEE-754 Decimal128 values. A value can be understood as 128-bit datum. Decimal128 values allows up to 34 significant digits and an exponent ranging from -6143 to 6144.</p>
  </emu-intro>
  <h1>The Decimal Object</h1>
  <emu-clause id="">
    <h1>The Decimal Constructor</h1>
  </emu-clause>
  <emu-clause id="">
    <h1>Properties of the Decimal Prototype</h1>
    <p>A <dfn id="dfn-rounding-mode">rounding mode</dfn> is one of the values *"ceil"*, *"floor"*, *"expand"*, *"trunc"*, *"halfEven"*, *"halfExpand"*, *"halfCeil"*, *"halfFloor"*, and *"halfTrunc"*.</p>
    <emu-clause>
      <h1>Decimal.prototype.add ( _x_, [ , _options_ ] )</h1>
      <p>Adds two Decimal values together and returns a fresh result. Neither argument is modified.</p>
      <emu-note>
	<p>If _x_ is not an instance of the Decimal object, then a *TypeError* will be thrown.</p>
	<p>Returns the result of adding the current Decimal128 value to _x_.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The addition will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause>
      <h1>Decimal.prototype.subtract ( _x_, [ , _options_ ] )</h1>
      <p>Subtracts the given Decimal value from the current one, returning a fresh result. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of subtracting _x_ from the current Decimal value, which must be an instance of the Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The subtraction will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause>
      <h1>Decimal.prototype.multiply ( _x_, [ , _options_ ] )</h1>
      <p>Multiplies the given Decimal value from the current one, returning a fresh result. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying _x_ from the current Decimal value, which must be an instance of the Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause>
      <h1>Decimal.prototype.divide ( _x_, [ , _options_ ] )</h1>
      <p>Divides the current Decimal value from the given Decimal value from the current one, returning a fresh result. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying _x_ from the current Decimal value, which must be an instance of the Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause>
      <h1>Decimal.prototype.round ( _mode_ )</h1>
      <p>Rounds the current Decimal value according to the specified rounding mode, returning a fresh result.</p>
      <emu-note>
	<p>Returns the result of rounding the current Decimal value.</p>
	<p>If _mode_ is not a String, a *TypeError* will be thrown.</p>
	<p>If _mode_ is not a rounding mode, a *RangeError* will be thrown.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>
</emu-clause>
