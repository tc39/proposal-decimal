<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Decimal
status: proposal
stage: 1
contributors: Jesse Alama
location: https://github.com/tc39/proposal-decimal/
</pre>

<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/tc39/proposal-decimal/" title="Decimal proposal (GitHub)">Decimal proposal</a> in ECMAScript.
  </p>
</emu-clause>

<emu-clause id="sec-normative-references">
  <h1>Normative References</h1>
  <emu-clause id="ieee-754-2019">
    <h1>IEEE 754-2019</h1>
    <p>"IEEE Standard for Floating-Point Arithmetic," in IEEE Std 754-2019 (Revision of IEEE 754-2008), pp.1-84, 22 July 2019, doi: 10.1109/IEEESTD.2019.8766229.</p>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-the-decimal-object">
  <h1>The Decimal128 Object</h1>
  <emu-intro id="sec-decimal-intro">
    <h1>Introduction</h1>
    <p>Decimal128 values, as specified here, are intended represent base-10 (decimal) numbers. ECMAScript, and many other languages, default to representing numbers in base-2 (binary). The conversion of a decimal digit string to a Number is usually inexact; the Number representing the initial decimal digit string is only approximately correct.</p>
    <p>Decimal128 values defined in this section are <emu-xref href="#ieee-754-2019">IEEE-754 Decimal128 values</emu-xref>. The full spectrum of values defined by Decimal128 are available here, including NaN and positive and negative infinity. (NB: The values NaN and both infinities, available here, are distinct from the built-in NaN, *Infinity* and *-Infinity* values that arise from the 64-bit binarry IEEE arithmetic used outside of the Decimal128 universe.) Decimal128 is a floating-point format whose range of values allows up to 34 significant digits and an exponent ranging from -6143 to 6144.</p>
    <p>A <dfn id="dfn-rounding-mode">rounding mode</dfn> is one of the values *"ceil"*, *"floor"*, *"expand"*, *"trunc"*, *"halfEven"*, *"halfExpand"*, *"halfCeil"*, *"halfFloor"*, and *"halfTrunc"*.</p>
    <p>A <dfn id="dfn-digit">digit</dfn> is one of the values *"0"*, *"1"*, *"2"*, *"3"*, *"4"*, *"5"*, *"6"*, *"7"*, *"8"*, and *"9"*</p>
    <p>A <dfn id="dfn-decimal-string">decimal string</dfn> is a string whose syntax is that of a sequence of digits followed by, optionally, a *"."* and a sequence of digits.</p>
    <p>A <dfn id="dfn-signed-decimal-string">signed decimal string</dfn> is a decimal string optionally preceded by a *"-"* (dash).</p>
    <p>An <dfn id="dfn-exponential-string">exponential string</dfn> is a string whose syntax is a decimal string whose mathematical value is at least 0 but less than 9, followed by an *"E"*, optionally a "-" (minus), and a sequence of digits.</p>
    <p>A <dfn id="dfn-signed-exponential-string">signed exponential string</dfn> is an exponential string optionally precided by a *"-"* (dash).</p>
    <p>The <dfn id="dfn-mathematical-value">mathematical value</dfn> of a Decimal128 object *d*, provided *d* is finite and not NaN, is the rational number *coefficient* of *d* multiplied by 10 raised to the power of the *exponent* of *d*. If *d* is infinite, the mathematical value of *d* is -∞ is *d* is negative and ∞ otherwise. If *d* is NaN, the mathematical value of *d* is undefined.</p>
  </emu-intro>
  <emu-clause id="sec-the-decimal-constructor">
    <h1>The Decimal128 Constructor</h1>
    <p>The constructor for the Decimal128 object takes a single argument. If the argument is not a String, throw a *TypeError*. The String argument must match one of the following four valid syntaxes:</p>
    <emu-grammar name="decimal-syntax">
      <emu-production name="DigitString" type="lexical">
	<emu-rhs><emu-prodref href="#prod-Decimal128Digit"></emu-prodref>+</emu-rhs>
      </emu-production>
      <emu-production name="UnsignedDecimal128DigitString" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-Decimal128Digits"></emu-prodref> "." <emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="SignedDecimal128DigitString" type="lexical" oneof>
	<emu-rhs>-? <emu-prodref name="UnsignedDecimal128DigitString"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar>
      <emu-production name="UnsignedDecimal128DigitString" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-Decimal128Digits"></emu-prodref> "." <emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="SignedDecimal128DigitString" type="lexical" oneof>
	<emu-rhs>[+-]? <emu-prodref name="UnsignedDigitString"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar name="exponential-syntax">
      <emu-production name="ExponentialDigitStringLHS" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-NonZeroDigit"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-NonZeroDigit"></emu-prodref> "." <emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="ExponentialDigitStringRHS" type="lexical">
	<emu-rhs>[-+]? <emu-prodref href="#prod-Decimal128Digits"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar name="infinity" oneof>
      <emu-production>`-` ? `Inf` [> or any token that is an ASCII case-insensitive match]</emu-production>
      <emu-production>`-` ? `Infinity` [> or any token that is an ASCII case-insensitive match]</emu-production>
    </emu-grammar>
    <emu-grammar name="nan">
      <emu-production>("N" | "n") | ("A" | "a") | ("N" | "n")</emu-production>
    </emu-grammar>
    <p>If *_x_* does not match any of these syntaxes, throw a *SyntaxError*.</p>
    <p>Multiple leading zeros will be reduced to a single zero.</p>
  </emu-clause>
</emu-clause>
  <emu-clause id="sec-decimal-prototype-properties">
    <h1>Properties of the Decimal128 Prototype</h1>
    <emu-clause id="sec-decimal.prototype.isnegative">
      <h1>Decimal128.prototype.isNegative</h1>
      <p>A property indicating whether *this* value is negative. The possible values are *undefined*, *true*, or *false*.</p>
      <emu-note>
	<p>The value of this property is intended to be *undefined* only when *this* Decimal128 value is NaN. In all other cases, this property should be either *true* or *false*.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.isnan">
      <h1>Decimal128.prototype.isNaN</h1>
      <p>A property indicating whether *this* value represents a Decimal128 NaN value. The possible values are *true* and *false*.</p>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.coefficient">
      <h1>Decimal128.prototype.coefficient</h1>
      <p>A property for the coefficient of *this* value. The possible values are *undefined* and a non-negative BigInt value.</p>
      <emu-note>
	<p>The value for this property is intended to be *undefined* only when *this* value is either infinite or NaN.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.exponent">
      <h1>Decimal128.prototype.exponent</h1>
      <p>A property for the exponent of *this* value. The possible values are *undefined* and a Number that is an <emu-xref href="#sec-number.isinteger">integer</emu-xref>.</p>
      <emu-note>
	<p>The value of this property is *undefined* only when *this* decimal value is either infinite or NaN.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.add">
      <h1>Decimal128.prototype.add ( _x_ )</h1>
      <p>Adds *this* value and *_x_*. Returns a fresh result, regardless of the mathematical value of *this* value or *_x_*. Neither *this* value nor *_x_* is modified.</p>
      <emu-note>
	<p>If _x_ is not an instance of the Decimal128 object, then a *TypeError* will be thrown.</p>
	<p>Returns the result of adding the current Decimal128 value to _x_.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The addition will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.subtract">
      <h1>Decimal128.prototype.subtract ( _x_ )</h1>
      <p>Subtracts *_x_* from *this* value. Returns a fresh result, regardless of the mathematical value of *_x_*. Neither *this* value nor *_x_* is modified.</p>
      <emu-note>
	<p>Returns the result of subtracting _x_ from the current Decimal128 value, which must be a Decimal128 object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, throw a *RangeError* exception. The subtraction will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.multiply">
      <h1>Decimal128.prototype.multiply ( _x_ )</h1>
      <p>Multiplies *this* value by *_x_*. Returns a fresh result, regardless of the mathematical value of *this* value or that of *_x_*. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying *this* value with _x_, which must be a Decimal128 object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.divide">
      <h1>Decimal128.prototype.divide ( _x_ )</h1>
      <p>Divides *this* value by *_y_*, which is supposed to be a Decimal128 object (otherwise a *TypeError* will be thrown). Returns a fresh result. Neither *this* value nor *_x_* is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying _x_ from the current Decimal128 value, which must be a Decimal128 object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.remainder">
      <h1>Decimal128.prototype.remainder ( _x_ )</h1>
      <p>Computes the remainder of dividing *this_ value by *_x_*. The sign of the result is the sign of *this* value. Returns a fresh result.</p>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.cmp">
      <h1>Decimal128.cmp ( _x_ )</h1>
      <p>Compares the <emu-xref href="#dfn-mathematical-value">mathematical value</emu-xref> of *this* value with the mathematical value of *_x_*, which is supposed to be a Decimal128 object. If *_x_* is not a Decimal128 object, throws a *TypeError*. Return *-1*<sub>𝔽</sub>, *+0*<sub>𝔽</sub>, or *1*<sub>𝔽</sub> is the mathematical value of the *this* value value is, respectively, less than, equal to, or strictly greater than the mathematical value of *_x_*.</p>
      <emu-alg>
	1. If _x_ is not a Decimal128 object, then
	  1. throw a *TypeError* exception.
	1. If [*this*][[isNaN]] or [*_x_*][[isNaN]] is *true*, then
	  1. return *undefined*.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-decimal-method-round">
      <h1>Decimal128.prototype.round ( _mode_ )</h1>
      <p>Rounds *this* value according to the specified rounding mode, returning a fresh result.</p>
      <emu-note>
	<p>If _mode_ is not a String, throw a *TypeError* exception.</p>
	<p>If _mode_ is not a rounding mode, throw a *RangeError* exception.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.normalize">
      <h1>Decimal128.prototype.normalize ( )</h1>
      <p>Returns a fresh Decimal128 object whose mathematical value is the same as that of *this* value but which is normal.</p>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.tostring">
      <h1>Decimal128.prototype.toString ( [ _options_ ] )</h1>
      <p>Renders *this* value as a <emu-xref href="#dfn-signed-decimal-string">signed decimal string</emu-xref>. _options_, is defined, is supposed to be a plain object. If _options_ has the property *numDecimal128Digits* and the value of that property is a non-negative Number, the return value will be a string that has exactly that many digits after the decimal point, possibly with the addition of trailing zeros.</p>
    </emu-clause>
    <emu-clause id="sec-decimal.prototype.valueof">
      <h1>Decimal128.prototype.valueOf ( _x_ )</h1>
      <p>Throw *TypeError*.</p>
    </emu-clause>
  </emu-clause>
</emu-clause>
