<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Decimal
status: proposal
stage: 1
contributors: Jesse Alama
location: https://github.com/tc39/proposal-decimal/
</pre>

<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/tc39/proposal-decimal/" title="Decimal proposal (GitHub)">Decimal proposal</a> in ECMAScript.
  </p>
</emu-clause>

<emu-clause id="sec-normative-references">
  <h1>Normative References</h1>
  <emu-clause id="ieee-754-2019">
    <h1>IEEE 754-2019</h1>
    <p>"IEEE Standard for Floating-Point Arithmetic," in IEEE Std 754-2019 (Revision of IEEE 754-2008), pp.1-84, 22 July 2019, doi: 10.1109/IEEESTD.2019.8766229.</p>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-the-decimal-object">
  <h1>The Decimal Object</h1>
  <emu-intro id="sec-decimal-intro">
    <h1>Introduction</h1>
    <p>Decimal values, as specified here, are intended represent base-10 (decimal) numbers. ECMAScript, and many other languages, default to representing numbers in base-2 (binary). The conversion of a decimal digit string to a Number is usually inexact; the Number representing the initial decimal digit string is only approximately correct.</p>
    <p>Decimal values defined in this section are <emu-xref href="#ieee-754-2019">IEEE-754 Decimal128 values</emu-xref>. The full spectrum of values defined by Decimal128 are available here, including NaN and positive and negative infinity. (NB: The values NaN and both infinities, available here, are distinct from the built-in NaN, *Infinity* and *-Infinity* values that arise from the 64-bit binarry IEEE arithmetic used outside of the Decimal universe.) Decimal128 is a floating-point format whose range of values allows up to 34 significant digits and an exponent ranging from -6143 to 6144.</p>
    <p>The data model defined here differs from official IEEE 754 Decimal128 in that all Decimal values defined here are understood to be normalized, which means that there will be no trailing zeroes. For instance, the addition of the Decimal value 1.3 and 0.7 is not 2.0, as it would be in official Decimal128, but 1 (with no trailing zero).</p>
  </emu-intro>
  <emu-clause id="sec-the-decimal-constructor">
    <h1>The Decimal Constructor</h1>
    <p>The constructor for the Decimal object takes a single argument. If the argument is not a String, throw a *TypeError*. The String argument must match one of the following four valid syntaxes:</p>
    <emu-grammar name="decimal-syntax">
      <emu-production name="DigitString" type="lexical">
	<emu-rhs><emu-prodref href="#prod-DecimalDigit"></emu-prodref>+</emu-rhs>
      </emu-production>
      <emu-production name="UnsignedDecimalDigitString" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-DecimalDigits"></emu-prodref> "." <emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="SignedDecimalDigitString" type="lexical" oneof>
	<emu-rhs>-? <emu-prodref name="UnsignedDecimalDigitString"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar>
      <emu-production name="UnsignedDecimalDigitString" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-DecimalDigits"></emu-prodref> "." <emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="SignedDecimalDigitString" type="lexical" oneof>
	<emu-rhs>[+-]? <emu-prodref name="UnsignedDigitString"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar name="exponential-syntax">
      <emu-production name="ExponentialDigitStringLHS" type="lexical" oneof>
	<emu-rhs><emu-prodref href="#prod-NonZeroDigit"></emu-prodref></emu-rhs>
	<emu-rhs><emu-prodref href="#prod-NonZeroDigit"></emu-prodref> "." <emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
      </emu-production>
      <emu-production name="ExponentialDigitStringRHS" type="lexical">
	<emu-rhs>[-+]? <emu-prodref href="#prod-DecimalDigits"></emu-prodref></emu-rhs>
      </emu-production>
    </emu-grammar>
    <emu-grammar name="infinity" oneof>
      <emu-production>`-` ? `Inf` [> or any token that is an ASCII case-insensitive match]</emu-production>
      <emu-production>`-` ? `Infinity` [> or any token that is an ASCII case-insensitive match]</emu-production>
    </emu-grammar>
    <emu-grammar name="nan">
      <emu-production>("N" | "n") | ("A" | "a") | ("N" | "n")</emu-production>
    </emu-grammar>
    <p>If *_x_* does not match any of these syntaxes, throw a *SyntaxError*.</p>
    <p>Multiple leading zeros will be reduced to a single zero.</p>
  </emu-clause>
</emu-clause>
  <emu-clause id="sec-decimal-prototype-properties">
    <h1>Properties of the Decimal Prototype</h1>
    <p>A <dfn id="dfn-rounding-mode">rounding mode</dfn> is one of the values *"ceil"*, *"floor"*, *"expand"*, *"trunc"*, *"halfEven"*, *"halfExpand"*, *"halfCeil"*, *"halfFloor"*, and *"halfTrunc"*.</p>
    <p>A <dfn id="dfn-digit">digit</dfn> is one of the values *"0"*, *"1"*, *"2"*, *"3"*, *"4"*, *"5"*, *"6"*, *"7"*, *"8"*, and *"9"*</p>
    <p>A <dfn id="dfn-decimal-string">decimal string</dfn> is a string whose syntax is that of a sequence of digits followed by, optionally, a *"."* and a sequence of digits.</p>
    <p>A <dfn id="dfn-signed-decimal-string">signed decimal string</dfn> is a decimal string optionally preceded by a *"-"* (dash).</p>
    <p>An <dfn id="dfn-exponential-string">exponential string</dfn> is a string whose syntax is a decimal string whose mathematical value is at least 0 but less than 9, followed by an *"E"*, optionally a "-" (minus), and a sequence of digits.</p>
    <p>A <dfn id="dfn-signed-exponential-string">signed exponential string</dfn> is an exponential string optionally precided by a *"-"* (dash).</p>
    <p>The <dfn id="dfn-mathematical-value">mathematical value</dfn> of a Decimal object *d*, provided *d* is finite and not NaN, is the rational number *coefficient* of *d* multiplied by 10 raised to the power of the *exponent* of *d*. If *d* is infinite, the mathematical value of *d* is -∞ is *d* is negative and ∞ otherwise. If *d* is NaN, the mathematical value of *d* is undefined.</p>
    <emu-clause id="sec-decimal-property-isnegative">
      <h1>Decimal.prototype.isNegative</h1>
      <p>A property indicating whether *this* value is negative. The possible values are **undefined**, **true**, or **false**.</p>
      <emu-note>
	<p>The value of this property is supposed to be **undefined** only when *this* Decimal value is NaN. In all other cases, this property should be either **true** or **false**.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-property-isnan">
      <h1>Decimal.prototype.isNaN</h1>
      <p>A property indicating whether *this* value represents a Decimal128 NaN value. The possible values are **true** and **false**.</p>
    </emu-clause>
    <emu-clause id="sec-decimal-property-coefficient">
      <h1>Decimal.prototype.coefficient</h1>
      <p>A property for the coefficient of *this* value. The possible values are **undefined** and a non-negative BigInt value.</p>
      <emu-note>
	<p>The value for this property is intended to be **undefined** only when *this* value is either infinite or NaN.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-property-exponent">
      <h1>Decimal.prototype.exponent</h1>
      <p>A property for the exponent of *this* value. The possible values are **undefined** and a Number that is an <emu-xref href="#sec-number.isinteger">integer</emu-xref>.</p>
      <emu-note>
	<p>The value of this property is **undefined** only when *this* decimal value is either infinite or NaN.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-property-">
      <h1>Decimal.prototype.isNaN</h1>
      <p>A Boolean property indicating whether *this* value represents a Decimal128 NaN.</p>
      <emu-note>
	<p>Decimal128's NaN, and the way it is modeled in the Decimal object, is distinct from the **NaN** value.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-add">
      <h1>Decimal.prototype.add ( _x_ [ , _options_ ] )</h1>
      <p>Adds *this* value and *_x_*. Returns a fresh result, regardless of the mathematical value of *this* value or *_x_*. Neither *this* value nor *_x_* is modified.</p>
      <emu-note>
	<p>If _x_ is not an insptance of the Decimal object, then a *TypeError* will be thrown.</p>
	<p>Returns the result of adding the current Decimal128 value to _x_.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The addition will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-subtract">
      <h1>Decimal.prototype.subtract ( _x_ [ , _options_ ] )</h1>
      <p>Subtracts *_x_* from *this* value. Returns a fresh result, regardless of the mathematical value of *_x_*. Neither *this* value nor *_x_* is modified.</p>
      <emu-note>
	<p>Returns the result of subtracting _x_ from the current Decimal value, which must be a Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, throw a *RangeError* exception. The subtraction will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-multiply">
      <h1>Decimal.prototype.multiply ( _x_ [ , _options_ ] )</h1>
      <p>Multiplies *this* value by *_x_*. Returns a fresh result, regardless of the mathematical value of *this* value or that of *_x_*. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying _x_ from the current Decimal value, which must be a Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-divide">
      <h1>Decimal.prototype.divide ( _x_ [ , _options_ ] )</h1>
      <p>Divides *this* value by *_x_*. Returns a fresh result, regardless of the mathematical value of *this* value or that of *_x_*. Neither argument is modified.</p>
      <emu-note>
	<p>Returns the result of multiplying _x_ from the current Decimal value, which must be a Decimal object.</p>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The multiplication will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-sqrt">
      <h1>Decimal.prototype.sqrt ( [ _options_ ] )</h1>
      <p>Returns the square root of *this* value.</p>
      <emu-note>
	<p>If _options_ is specified and _roundingMode_ is a property of _options_, then Get(_options_, *roundingMode*) must be a rounding mode. If Get(_options_, *roundingMode*) is not a rounding mode, a *RangeError* will be thrown. The calculation will be carried out according to the specified rounding mode.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-round">
      <h1>Decimal.prototype.round ( _mode_ )</h1>
      <p>Rounds *this* value according to the specified rounding mode, returning a fresh result.</p>
      <emu-note>
	<p>If _mode_ is not a String, throw a *TypeError* exception.</p>
	<p>If _mode_ is not a rounding mode, throw a *RangeError* exception.</p>
      </emu-note>
    </emu-clause>
    <emu-clause id="sec-decimal-method-tostring">
      <h1>Decimal.prototype.toString ( )</h1>
      <p>Renders *this* value as a <emu-xref href="#dfn-signed-decimal-string">signed decimal string</emu-xref>.</p>
    </emu-clause>
    <emu-clause id="sec-decimal-method-toexponential">
      <h1>Decimal.prototype.toExponential ( )</h1>
      <p>Renders *this* value as a <emu-xref href="#dfn-signed-exponential-string">signed exponential string</emu-xref>.</p>
    </emu-clause>
    <emu-clause id="sec-decimal-method-tofixed">
      <h1>Decimal.prototype.toFixed ( _n_ [ , _options_ ] )</h1>
      <p>Renders *this* value as a <emu-xref href="#dfn-signed-exponential-string">signed exponential string</emu-xref> but with exactly *_n_* digits after the decimal point. If specified, the rounding mode in `_options_` will be used to determine the result in case *this* value, if rendered as a <emu-xref href="#dfn-signed-decimal-string">signed decimal string</emu-xref>, has more than *_n_* digits after the decimal point.</p>
    </emu-clause>
    <emu-clause id="sec-decimal-method-cmp">
      <h1>Decimal.prototype.cmp ( _x_ )</h1>
      <p>Compares the <emu-xref href="#dfn-mathematical-value">mathematical value</emu-xref> of *this* value with the mathematical value of *_x_*, which is supposed to be a Decimal object. If *_x_* is not a Decimal object, throws a *TypeError*. Return *-1*<sub>𝔽</sub>, *+0*<sub>𝔽</sub>, or *1*<sub>𝔽</sub> is the mathematical value of the *this* value value is, respectively, less than, equal to, or strictly greater than the mathematical value of *_x_*.</p>
      <emu-alg>
	1. If _x_ is not a Decimal object, then
	  1. throw a *TypeError* exception.
	1. If [*this*][[isNaN]] or [*_x_*][[isNaN]] is **true**, then
	  1. return **undefined**.
      </emu-alg>
    </emu-clause>
    <emu-clause id="sec-decimal-method-valueof">
      <h1>Decimal.prototype.valueOf ( _x_ )</h1>
      <p>Throw *TypeError*.</p>
    </emu-clause>
  </emu-clause>
</emu-clause>
